
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.brevy.spring.cxf.ws.services.fc.formula.impl;



import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.mvel2.MVEL;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.brevy.spring.cxf.ws.services.fc.formula.ExprCType;
import com.brevy.spring.cxf.ws.services.fc.formula.FormulaPortType;

/**
 * This class was generated by Apache CXF 2.7.5
 * 2013-06-03T10:44:07.149+08:00
 * Generated source version: 2.7.5
 * 
 */
@Component("formulaService")
@javax.jws.WebService(
                      serviceName = "FormulaService",
                      portName = "FormulaPort",
                      targetNamespace = "http://cxf.spring.brevy.com/services/FC/Formula",
                      endpointInterface = "com.brevy.spring.cxf.ws.services.fc.formula.FormulaPortType")
                      
public class FormulaPortTypeImpl implements FormulaPortType {

    /* (non-Javadoc)
     * @see com.brevy.spring.cxf.ws.services.fc.formula.FormulaPortType#createFormula(com.brevy.spring.cxf.ws.services.fc.formula.ExprCType  formulaRequestPart )*
     */
    public java.math.BigDecimal createFormula(ExprCType formulaRequestPart) { 
        log.info("Executing operation createFormula");
        try {
        	String expr = formulaRequestPart.getExpression();   	
    		Matcher matcher = PATTERN.matcher(expr);
    		
    		int i = 1;
    		Map<String, BigDecimal> mvelVars = new HashMap<String, BigDecimal>();
    		StringBuffer sb = new StringBuffer();
    		while(matcher.find()){
    			String group = matcher.group();
    			log.trace("matcher group: {}", new Object[]{group});	
    			String var = "X" + i++;
    			mvelVars.put(var, new BigDecimal(group));
    			matcher.appendReplacement(sb, var);
    		}
    		String replacedExpr = matcher.appendTail(sb).toString();
    		
    		log.debug("expression replaced: {}", new Object[]{replacedExpr});
    
    		BigDecimal result = (BigDecimal)MVEL.eval(replacedExpr, mvelVars);
    		result = result.setScale(formulaRequestPart.getSettings().getScale(), formulaRequestPart.getSettings().getRoundingMode());
            return result;
        } catch (java.lang.Exception ex) {
            throw new RuntimeException(ex);
        }
    }
    
    private static final Pattern PATTERN = Pattern.compile("\\d+(\\.\\d+)?");   
    
	private transient Logger log = LoggerFactory.getLogger(this.getClass());

}
